#include <Arduino.h>
#include <utils_drawing.h>
#include <utils_math.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SharpMem.h>

// SPI pins for display
#define SHARP_SCK  D8
#define SHARP_MOSI D10
#define SHARP_SS   D7

// Set the size of the display here, e.g. 144x168!
Adafruit_SharpMem display(SHARP_SCK, SHARP_MOSI, SHARP_SS, 144, 168);

// Colors
#define BLACK 0
#define WHITE 1

// Example data for a part of Miesbach
int ways1[493][2] = {73, 141,  72, 136,  71, 131,  70, 130,  68, 126,  67, 123,  64,
       119,  62, 117,  60, 115,  58, 113,  56, 111,  55, 111,  53, 109,
        51, 108,   0,   0, 143,  93, 142,  90, 141,  88, 140,  86,   0,
         0,  51, 108,  52,  96,  52,  79,  51,  64,   0,   0,  18, 139,
        14, 111,  11, 100,   0,   0,   1, 139,   2, 125,   0,   0, 143,
         7, 140,   5,   0,   0, 134,  51, 126,  48, 120,  48,   0,   0,
       101,  45, 104,  46, 107,  47, 116,  48, 120,  48,   0,   0,  37,
        27,  34,  36,  33,  40,  31,  42,  30,  45,  30,  49,  32,  59,
        33,  71,  34,  78,  34,  86,   0,   0,   6,  18,   3,  12,   0,
         0,  80,  51,  78,  37,  75,  19,  73,  10,   0,   0,  91,  86,
        98,  87, 102,  88, 106,  91, 111,  96, 114,  97, 116,  97, 119,
        94, 122,  92, 124,  90, 129,  85, 132,  84, 134,  81,   0,   0,
        91, 141,  91, 137,  90, 131,  89, 128,  89, 127,  87, 115,  87,
       108,  87, 102,  89,  96,   0,   0,  91,  47,  92,  50,  89,  62,
        88,  64,   0,   0, 117, 118, 117, 113, 117, 106, 118, 102, 119,
        97, 122,  92,   0,   0, 117, 118, 114, 123, 112, 127, 110, 130,
       108, 133, 103, 135,  97, 138,  94, 140,  91, 141,   0,   0,  75,
        19,  62,  23,  60,  24,  59,  24,  52,  26,  47,  28,   0,   0,
        23,  86,  25,  88,  27,  99,  29, 114,  33, 138,   0,   0,  89,
        96,  80,  96,  75,  96,   0,   0,  89, 127,  84, 127,  83, 125,
        80, 122,  80, 108,  80, 107,  80,  96,   0,   0, 106, 143, 112,
       140, 116, 138, 120, 139, 126, 141, 134, 143,   0,   0,  62,  96,
        62, 111,  60, 115,   0,   0,  67,  96,  67, 107,  67, 114,  64,
       119,   0,   0,  80,  51,  80,  66,   0,   0,  45,  12,  51,  11,
        54,  13,  61,  14,  73,  10,   0,   0,  78,  37,  69,  40,  65,
        41,  60,  39,  48,  42,   0,   0,  61,  14,  61,  17,  62,  23,
         0,   0,  88,  64,  80,  66,  74,  68,  69,  73,  64,  76,  55,
        79,  52,  79,   0,   0, 129,  65, 134,  64, 135,  64, 140,  63,
       143,  64,   0,   0, 140,  86,   0,   0,  69,  40,  70,  56,   0,
         0,  11,  91,  18,  88,   0,   0, 131,  54, 132,  52, 134,  51,
       139,  50, 143,  50,   0,   0,  60,   8,  61,  14,   0,   0,  75,
        96,  67,  96,  64,  96,  62,  96,  52,  96,   0,   0,  88,  64,
        88,  71,  90,  75,  91,  86,  90,  90,  89,  96,   0,   0, 140,
         5,   0,   0,  64,  76,  64,  96,   0,   0,  46,  25,  37,  27,
        33,  25,  30,  23,  12,  18,  10,  18,   6,  18,   0,   0,   3,
        12,   6,  18,   0,   0,   3,  12,   0,   0,  51,  64,  50,  56,
        48,  42,  47,  28,  46,  25,   0,   0, 137,  93, 133,  91, 125,
        95, 125,  93,   0,   0, 125,  93, 125,  90,   0,   0, 125,  90,
       124,  90,   0,   0, 140,  86, 138,  83, 134,  81, 132,  79, 131,
        77, 129,  65, 130,  60, 130,  56, 131,  54,   0,   0, 125,  95,
       121,  97, 119,  99, 120, 101, 121, 109, 125, 109, 135, 108,   0,
         0,  53, 135,  42, 140,  40, 141,  38, 142,   0,   0,  70, 130,
        80, 122,   0,   0,  46,  25,  45,  12,  45,   7,  45,   1,   0,
         0,  60,  24,  60,  39,   0,   0,  80,  51,  70,  56,  66,  58,
        60,  60,  51,  64,   0,   0,  75,  96,  74,  68,   0,   0, 134,
        51, 132,  18, 138,  15, 140,   5,   0,   0, 143,  64,   0,   0,
       109,  62, 108,  53, 106,  53, 107,  47,   0,   0, 111,  61, 130,
        56,   0,   0, 133,  91, 132,  84,   0,   0, 137,  93, 139,  94,
       140,  97, 140, 100, 140, 103, 138, 105, 137, 106, 135, 108,   0,
         0,  87, 108,  84, 108,  82, 108,   0,   0,  52, 131,  52, 128,
        51, 123,  50, 115,   0,   0,   4, 104,   6,  99,   0,   0,  18,
        88,  23,  86,  23,  86,  29,  84,  30,  84,   0,   0,  81, 120,
        80, 122,   0,   0,  82, 120,  81, 120,   0,   0,  82, 108,  81,
       108,   0,   0,  87, 102,  84, 102,  84, 108,  84, 118,  82, 120,
         0,   0, 132,  64, 134,  64,   0,   0, 126,  48, 129,  54,   0,
         0, 129,  54, 132,  64,   0,   0,  79,   5,  81,  10,   0,   0,
        67, 107,  80, 107,   0,   0,  23,  86,  16,  70,  13,  67,   9,
        57,   0,   0,   9,  57,  18,  49,  16,  44,  17,  37,  10,  18,
         0,   0, 101,  45, 102,  36, 104,  23, 102,  14,   0,   0, 140,
         5, 135,   4, 134,   3, 134,   2,   0,   0, 120,  48, 116,  23,
       115,  13,   0,   0,   1,  90,   5,  91,   8,  92,   0,   0,  33,
        71,  51,  64,   0,   0,  91,  47, 101,  45,   0,   0, 143,  50,
         0,   0,  91,  47,  83,  48,  80,  51,   0,   0,  75, 141,  76,
       142,  77, 143,  71, 143,  72, 142,  73, 141,  75, 141,   0,   0,
        38, 142,   0,   0,   1,  90,   0,  86,   0,   0,  52, 140,  51,
       140,   0,   0,  47, 123,  48, 123,  47, 118,  46, 118,  47, 123,
         0,   0,  56, 129,  57, 128,  55, 123,  55, 123,  55, 124,  56,
       129,   0,   0,  81,  10,  85,  25,  88,  36,  91,  47,   0,   0,
        74,   8,  77,  11,  81,  10,   0,   0, 143,   7,   0,   0,  85,
        25,  98,  20,  98,  23,   0,   0,  98,  23, 102,  36,   0,   0,
        51, 108,  46, 103,  42,  97,  38,  92,  36,  88,  34,  86,  30,
        84,  30,  84,   0,   0,   6,  99,   8,  92,   0,   0,  11, 100,
         8,  92,   0,   0,   8,  92,  11,  91,   0,   0,  42, 140,   0,
         0,  81, 108,  80, 108,   0,   0,  23,   0,  34,   3,  41,   2,
        42,   1,  45,   1,   0,   0,  41,   2,   0,   0,  50, 115,  50,
       112,  51, 108,   0,   0,  53, 135,  52, 131,   0,   0};



// Matrix buffer for map rotation
float* rotMtx = new float[4];

// Point buffers for line drawing
int* point1 = new int[2];
int* point2 = new int[2];

// Center of screen
const int screenCenter[2] = {72, 72};

// Current map rotation in degrees
int curr_deg = 0;

// Thickness of lines
int curr_thickness = 2;


void setup(void) {

  sleep(3);

  Serial.begin(9600);
  Serial.println("Hello!");
  

  // start & clear the display
  display.begin();
  display.clearDisplay();
}





void loop(void) {

  // rotate by one degree
  ++curr_deg %= 360;
  // curr_deg = 0;

  // get rotation matrix
  rad2rotMtx(rotMtx, curr_deg*DEG_TO_RAD);

  long t_start = millis();

  // rotate first point and store it in point1
  rotatePoint(point1, rotMtx, ways1[0], screenCenter);

  display.clearDisplay();
  long t_1 = millis();
  display.startWrite();
  for(int i=1; i<492; i++) {

    // If next point is 0, we need to skip it
    if(!ways1[i+1][0] && !ways1[i+1][1]) {
      i++;
      rotatePoint(point1, rotMtx, ways1[i+1], screenCenter);
      continue;

    }

    rotatePoint(point2, rotMtx, ways1[i+1], screenCenter);

    // Draw line
    draw_line(display, point1[0], 144-point1[1], point2[0], 144-point2[1], curr_thickness, BLACK);

    // Copy point2 into point1 for next line segment
    memcpy(point1, point2, sizeof(int)*2);
  }
  display.endWrite();
  long t_2 = millis();
  display.refresh();
  long t_3 = millis();

  int t_clear = t_1 - t_start;
  int t_draw = t_2 - t_1;
  int t_refresh = t_3 - t_2;
  int t_loop = t_3 - t_start;

  Serial.print("T_clear: \t");
  Serial.print(t_clear);
  Serial.print(", T_draw: \t");
  Serial.print(t_draw);
  Serial.print(", T_refresh: \t");
  Serial.print(t_refresh);
  Serial.print(", T_loop: \t");
  Serial.println(t_loop);

  delay(20);
}